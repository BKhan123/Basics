using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    class Books
    {public string title;}

    public class testClass
    {
        public static void Main(string[] args)
        {
            Books Book1 = new Books();   /* Declare Book1 of type Book */
            Books Book2 = new Books();   /* Declare Book2 of type Book */
            Book1 = Book2;
            //We have Books Class and we are assigning values of Book2 to Book1.
            //So when we change Book2 values the Book1 values also gets affected because Class is refernce type.
            Book2.title = "def";
            //Output : def
            Console.WriteLine(Book1.title);
            //Output : def
            Console.WriteLine(Book2.title);
            testStructure test = new testStructure();
            test.structTest();
            Console.ReadKey();
        }
    }

    struct BooksStuct
    {public string title;}

    public class testStructure
    {
        public  void structTest()
        {
            BooksStuct Book1;
            BooksStuct Book2 = new BooksStuct();   /* Declare Book2 of type Book */
            Book1.title = "abc";
            //We have BooksStuct strcut and we are assigning values of Book2 to Book1.
            Book1 = Book2;
            //So when we change Book2 values the Book1 values doesnot get affected because Struct is value type.
            Book2.title = "def";
            //Output : null 
            Console.WriteLine(Book1.title);
            //Output : def
            Console.WriteLine(Book2.title);
            Console.ReadKey();
        }
    }
}

